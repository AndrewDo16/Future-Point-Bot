import psycopg2

from config.database_config import DB_CONFIG

def get_connection():
    conn = psycopg2.connect(**DB_CONFIG)
    return conn


# Функция для инициализации базы данных
def init_db():
    conn = get_connection()
    cursor = conn.cursor()

    # Проверяем существует ли схема telegram
    cursor.execute("""
                   SELECT schema_name
                   FROM information_schema.schemata
                   WHERE schema_name = 'telegram';
                   """)
    if not cursor.fetchone()[0]:
        cursor.execute("""
            CREATE SCHEMA telegram;
        """)




#                                           USERS
# _________________________________________________________________________________________________________________
    # Проверяем, существует ли таблица users
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'users'
        );
    """)
    if not cursor.fetchone()[0]:
        # Если таблица не существует, создаем её
        cursor.execute("""
            CREATE TABLE telegram.users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                subscription_status TEXT DEFAULT 'inactive',
                subscription_end_date DATE
            );
        """)





#                                               TRANSACTION
# _________________________________________________________________________________________________________________

    # Проверяем, существует ли таблица transactions
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'transactions'
        );
    """)
    if not cursor.fetchone()[0]:
        # Если таблица не существует, создаем её
        cursor.execute("""
            CREATE TABLE telegram.transactions (
                transaction_id TEXT PRIMARY KEY,
                user_id BIGINT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_amount BIGINT,
                currency VARCHAR(10)
            );
        """)






#                                               PROMO_CODES
# _________________________________________________________________________________________________________________
    # Проверяем, существует ли таблица promo_codes
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'promo_codes'
        );
    """)
    if not cursor.fetchone()[0]:
        # Если таблица не существует, создаем её
        cursor.execute("""
            CREATE TABLE telegram.promo_codes (
            code TEXT PRIMARY KEY,
            days INTEGER NOT NULL,
            used BOOLEAN DEFAULT FALSE,
            used_by BIGINT,
            created_by VARCHAR,
            create_stamp timestamp
            );
        """)







#                                               GROUPS
# _________________________________________________________________________________________________________________
    # Проверяем, существует ли таблица groups
    cursor.execute("""
                   SELECT EXISTS (SELECT
                                  FROM information_schema.tables
                                  WHERE table_name = 'groups');
                   """)
    if not cursor.fetchone()[0]:
        cursor.execute("""
                       CREATE TABLE telegram.groups
                       (
                           group_id   SERIAL PRIMARY KEY,
                           group_name TEXT UNIQUE NOT NULL,
                           chat_id    BIGINT      NOT NULL
                       );
                       """)










#                                               PRICE
# _________________________________________________________________________________________________________________
    # Проверяем, существует ли таблица price
    cursor.execute("""
                   SELECT EXISTS (SELECT
                                  FROM information_schema.tables
                                  WHERE table_name = 'price');
                   """)
    if not cursor.fetchone()[0]:
        cursor.execute("""
                       CREATE TABLE telegram.price
                       (
                           price_id                 INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY 
                           price                    BIGINT  NOT NULL,
                           currency                 TEXT    NOT NULL,
                           subscription_period      INTEGER NOT NULL,
                           subscription_period_days INTEGER NOT NULL
                       );

                       INSERT INTO telegram.price
                       VALUES (30, 'USDT', 1, 30);
                       INSERT INTO telegram.price
                       VALUES (90, 'USDT', 3, 90);
                       INSERT INTO telegram.price
                       VALUES (2500, 'RUB', 1, 30);
                       INSERT INTO telegram.price
                       VALUES (7500, 'RUB', 3, 90);
                       """)


#                                           CRYPTO_WALLET
# _________________________________________________________________________________________________________________
    # Проверяем, существует ли таблица CRYPTO_WALLET
    cursor.execute("""
                   SELECT EXISTS (SELECT
                                  FROM information_schema.tables
                                  WHERE table_name = 'crypto_wallet');
                   """)
    if not cursor.fetchone()[0]:
        cursor.execute("""
                       CREATE TABLE telegram.crypto_wallet
                       (
                           wallet_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           wallet    VARCHAR(512) NOT NULL,
                           chain     VARCHAR(30)  NOT NULL
                       );

                       INSERT INTO telegram.crypto_wallet
                       VALUES ('0x695bf46a362204B370e2914bbd5667068bE8f7d0', 'ВЕР20');

                       """)




# закрываем коннект
    conn.commit()
    conn.close()
