import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from web3 import Web3
from perisist.transaction.transaction_dao import is_transaction_used, save_transaction
from keyboards.payment.payment_error_keyboard import get_payment_error_keyboard
from perisist.transaction.wallet.crypto_wallet_dao import get_primary_wallet
from service.profile.update_subscription_service import update_subscription_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance Smart Chain
bsc_url = "https://bsc-dataseed.binance.org/"
web3 = Web3(Web3.HTTPProvider(bsc_url))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC
if not web3.is_connected():
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance Smart Chain.")
else:
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance Smart Chain —É—Å–ø–µ—à–Ω–æ.")

# –¶–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
TARGET_ADDRESS = "0x695bf46a362204B370e2914bbd5667068bE8f7d0".lower()

# –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ USDT –Ω–∞ BSC
USDT_CONTRACT_ADDRESS = "0x55d398326f99059fF775485246999027B3197955"

# ABI –¥–ª—è BEP-20
bep20_abi = [
    {
        "constant": True,
        "inputs": [],
        "name": "symbol",
        "outputs": [{"name": "", "type": "string"}],
        "type": "function"
    },
    {
        "constant": True,
        "inputs": [],
        "name": "decimals",
        "outputs": [{"name": "", "type": "uint8"}],
        "type": "function"
    },
    {
        "constant": False,
        "inputs": [{"name": "_to", "type": "address"}, {"name": "_value", "type": "uint256"}],
        "name": "transfer",
        "outputs": [{"name": "", "type": "bool"}],
        "type": "function"
    }
]

async def handle_check_transaction_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    action, total_price, total_days = query.data.split(':')  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ ":"
    total_price = int(total_price)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —á–∏—Å–ª–æ
    total_days = int(total_days)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —á–∏—Å–ª–æ

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CallbackQuery
    user = query.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º total_price –∏ total_days –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["total_price"] = total_price
    context.user_data["total_days"] = total_days

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ BSC, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É.",
                                  reply_markup=
                                  InlineKeyboardMarkup([
                                      [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="choose_payment")]
                                  ])
                                  )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º—ã –∂–¥—ë–º –≤–≤–æ–¥ —Ö—ç—à–∞
    context.user_data["waiting_for_tx"] = True

    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

check_transaction_button_handler = CallbackQueryHandler(handle_check_transaction_button, pattern=r"^check_transaction:\d+:\d+$")


async def handle_transaction_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
    if not context.user_data.get("waiting_for_tx"):
        logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –º—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–≤–æ–¥

    tx_hash = update.message.text.strip()
    context.user_data["waiting_for_tx"] = False  # –°–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥

    total_amount = context.user_data["total_price"]
    total_days = context.user_data["total_days"]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user = update.message.from_user

    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {tx_hash}")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ö—ç—à —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        if is_transaction_used(tx_hash):
            logger.error(f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash} —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≠—Ç–æ—Ç —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", reply_markup=get_payment_error_keyboard(total_amount, total_days))
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if not web3.is_connected():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance Smart Chain.")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ BSC.", reply_markup=get_payment_error_keyboard(total_amount, total_days))
            return

        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC —É—Å–ø–µ—à–Ω–æ.")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = web3.eth.get_transaction(tx_hash)
        if not transaction:
            logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_payment_error_keyboard(total_amount, total_days))
            return

        logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {transaction}")

        receipt = web3.eth.get_transaction_receipt(tx_hash)
        if receipt['status'] != 1:
            logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.", reply_markup=get_payment_error_keyboard(total_amount, total_days))
            return

        logger.info("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
        is_contract = web3.eth.get_code(transaction['to']) != b''
        if not is_contract or transaction['to'].lower() != USDT_CONTRACT_ADDRESS.lower():
            logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º USDT.")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º USDT.", reply_markup=get_payment_error_keyboard(total_amount, total_days))
            return

        logger.info("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º USDT.")

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        contract = web3.eth.contract(address=transaction['to'], abi=bep20_abi)
        decoded_input = contract.decode_function_input(transaction['input'])
        recipient = decoded_input[1]['_to']
        amount = decoded_input[1]['_value']

        token_decimals = contract.functions.decimals().call()
        amount_in_tokens = amount / (10 ** token_decimals)

        logger.info(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –ø–æ–ª—É—á–∞—Ç–µ–ª—å={recipient}, —Å—É–º–º–∞={amount_in_tokens}.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—ã

        wallet, chain = get_primary_wallet()

        if recipient != wallet:
            logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ {recipient}.")
            message = "‚ùå –û—à–∏–±–∫–∞: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\\. " \
                      "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É –∫–æ—à–µ–ª—å–∫—É\\. \n" \
                      "–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [@Avgust52](https://t.me/Avgust52 )\\."

            await update.message.reply_text(
                message,
                reply_markup=get_payment_error_keyboard(total_amount, total_days),
                parse_mode='MarkdownV2'
            ),

            return

        if amount_in_tokens < total_amount:
            logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É {amount_in_tokens}.")
            message = (
                "‚ùå –û—à–∏–±–∫–∞: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\\. "
                "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ–Ω–æ–º—É –ø–ª–∞–Ω—É\\. "
                f"–í —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ {amount_in_tokens}\\. \n"
                "–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [@Avgust52](https://t.me/Avgust52 )\\."
            )

            await update.message.reply_text(
                message,
                reply_markup=get_payment_error_keyboard(total_amount, total_days),
                parse_mode='MarkdownV2'
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —É —é–∑–µ—Ä–∞
        new_end_date = update_subscription_service(total_days, user.id)

        reply = (
            f"üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!\n"
            f"üì¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{recipient}`\n"
            f"ü™ô –¢–æ–∫–µ–Ω: USDT\n"
            f"üí∞ –°—É–º–º–∞: `{amount_in_tokens:.6f} USDT`\n"
            f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {new_end_date}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_transaction(tx_hash, amount_in_tokens, "USDT", user.id)

        await update.message.reply_text(reply, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="main_profile")]])
                                        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash}: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}", reply_markup=get_payment_error_keyboard(total_amount, total_days))

