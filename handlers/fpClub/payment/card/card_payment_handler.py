from telegram import Update, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters

from keyboards.payment.choose_payment_keyboard import get_fp_club_choose_period_keyboard
from perisist.price.price_dao import get_price_for_rub_by_period, get_total_day_for_rub
from perisist.transaction.transaction_dao import save_transaction
from service.profile.update_subscription_service import update_subscription_service

CARD_METHOD = "card"

async def handle_choose_period_card_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    payment_text = ("""
        –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    """
    )

    await query.edit_message_text(
        text=payment_text,
        reply_markup=get_fp_club_choose_period_keyboard(CARD_METHOD)
    )

choose_period_card_payment = CallbackQueryHandler(handle_choose_period_card_payment, pattern="^payment_card$")


async def handle_card_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
    action, total_month = query.data.split(':')  # –ù–∞–ø—Ä–∏–º–µ—Ä: payment_card:5
    total_month = int(total_month)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    total_price = int(get_price_for_rub_by_period(total_month) * 100)  # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    total_days = get_total_day_for_rub(total_month)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—á–µ—Ç–∞
    title = "–ü–æ–¥–ø–∏—Å–∫–∞"
    description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {total_days} –¥–Ω–µ–π"
    payload = f"subscription:{total_month}:{total_days}:{total_price}"
    provider_token = "381764678:TEST:124171"  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    currency = "RUB"
    start_parameter = "prod"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫ –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    provider_data = {
        "receipt": {
            "customer": {
                # Email –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç
            },
            "items": [
                {
                    "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å",
                    "quantity": 1,
                    "amount": {
                        "value": f"{total_price / 100:.2f}",  # —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
                        "currency": "RUB"
                    },
                    "vat_code": 1,  # –ë–µ–∑ –ù–î–°
                    "payment_mode": "full_payment",
                    "payment_subject": "commodity"
                }
            ]
        }
    }

    # –¶–µ–Ω—ã
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=total_price)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∑–∞–ø—Ä–æ—Å–æ–º email
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token=provider_token,
        currency=currency,
        prices=prices,
        start_parameter=start_parameter,

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        need_email=True,
        send_email_to_provider=True,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤ –ÆKassa

        # –ü–µ—Ä–µ–¥–∞–µ–º —á–µ–∫
        provider_data=provider_data
    )
card_payment = CallbackQueryHandler(handle_card_payment, pattern=r"^payment_card:\d+$")


async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    # –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥!
    await query.answer(ok=True)

precheckout_card_operation = PreCheckoutQueryHandler(precheckout_callback)


async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    payload = payment.invoice_payload
    transaction_id = payment.provider_payment_charge_id

    _, total_month, total_days, total_price = payload.split(':')  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ ":"
    total_price = int(total_price)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —á–∏—Å–ª–æ
    total_days = int(total_days)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —á–∏—Å–ª

    user_id = update.effective_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —É —é–∑–µ—Ä–∞
    new_end_date = update_subscription_service(total_days, user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–π–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É
    save_transaction(transaction_id, total_price, "RUB", user_id)

    # –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: –≤—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ —Ç.–ø.
    chat_id = update.message.chat_id
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
             f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {new_end_date}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="main_profile")]])
    )

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    print(f"–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª: {transaction_id}, payload={payload}")

successful_card_payment = MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback)
