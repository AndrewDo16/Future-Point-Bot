import logging

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler

from database import check_promo_code, mark_promo_code_as_used, update_subscription_with_promo, get_subscription_status

logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"
async def handle_enter_promo_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º—ã –∂–¥—ë–º –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    context.user_data["waiting_for_promo"] = True

    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

enter_promo_button_handler = CallbackQueryHandler(handle_enter_promo_button, pattern="^enter_promo$")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def handle_promo_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("waiting_for_promo"):
        logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –º—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–≤–æ–¥

    promo_code = update.message.text.strip()
    context.user_data["waiting_for_promo"] = False  # –°–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥

    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
        promo_data = check_promo_code(promo_code)
        if not promo_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                                                      callback_data="enter_promo")],
                                                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="fp_club")],
                                            ]))
            return

        days_to_add, is_used = promo_data
        if is_used:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                                                      callback_data="enter_promo")],
                                                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="fp_club")],
                                            ]))
            return

        # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id
        mark_promo_code_as_used(promo_code, user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_subscription_with_promo(user_id, days_to_add)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        _, subscription_end_date, _ = get_subscription_status(user_id)

        await update.message.reply_text(
            f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {subscription_end_date}."
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code}: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}",
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="fp_club")]
                                        ]))

# promo_input_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_promo_input)